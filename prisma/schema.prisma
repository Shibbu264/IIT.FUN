generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email          String?             @unique
  name           String?
  createdAt      DateTime            @default(now())
  image          String?
  points         Int                 @default(0)
  wallet         String?             @unique
  id             Int                 @id @default(autoincrement())
  InstiId        Boolean?            @default(false)
  discord        Boolean?            @default(false)
  twitter        Boolean?            @default(false)
  telegram       Boolean?            @default(false)
  username       String?             @unique
  InstituteName  String?
  socialAccounts SocialAccount[]
  bounties       UserBounty[]
  communityCalls UserCommunityCall[]
}

// add type link communityCalls
model Bounty {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  image       String
  amount      Int
  unit        String
  Link        String
  deadline    String
  users       UserBounty[]
}

model CommunityCall {
  id          Int                 @id @default(autoincrement())
  title       String
  description String
  image       String
  amount      Int?
  unit        String?
  Link        String?
  date        String
  users       UserCommunityCall[]
}

model UserCommunityCall {
  id              Int           @id @default(autoincrement())
  userId          Int
  communityCallId Int
  pointsEarned    Int?
  attended        Boolean @default(false)
  communityCall   CommunityCall @relation(fields: [communityCallId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([userId, communityCallId])
}

model UserBounty {
  id           Int    @id @default(autoincrement())
  userId       Int
  bountyId     Int
  pointsEarned Int?
  bounty       Bounty @relation(fields: [bountyId], references: [id])
  user         User   @relation(fields: [userId], references: [id])

  @@unique([userId, bountyId])
}

model SocialAccount {
  id           Int       @id @default(autoincrement())
  provider     String
  providerId   String
  username     String?
  profileUrl   String?
  userId       Int
  createdAt    DateTime  @default(now())
  accessToken  String
  expiresAt    DateTime?
  refreshToken String?   @unique
  user         User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}
